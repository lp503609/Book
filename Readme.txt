记录的内容:
1:github版本控制学习
2:项目的代码设计和想法.
	开发工具的选择:	eclipse/intellij Idea/android studio
				选择:eclipse
				原因:较为熟悉.
	开发语言:
		1:前期java,后期python.
			原因:先在熟悉的环境下学习github以及建立项目框架或模式,在开始学习和练习python.
	项目设计:
		问题:
			1:为什么写成代码的方式来记录或描述书籍? 为了将书中的知识点形成逻辑自洽的思路.
			2:为什么要修改原有的名词? 为了更好的理解书籍内容,将一些描述不准确的名词重新命名或添加更加准确的定义类似于本地化.
			3:为什么一本书至少有两个源码项目? 项目目的不同:一个项目是为了了解,第二个项目是对知识点的模拟和应用,第三个是书中的例子.
			4:为什么建立这样的项目?对书籍知识进行一次整理,防止知识碎片化.(具体来说是为了让自己能更加容易的应用所学习到的知识点,还有就是想讲自己的知识点具现化)
			5:书籍按照什么方式选择的? 大部分按照学习性质来选择的.类型大致分为有金融理财,数学与逻辑思维,软件程序设计,健身,心脏病后期维护.
		项目说明
			一本书一般会产生两个代码项目.
				第一个代码项目用于记录书籍所描述的知识点和定义,代码的作用仅仅是整理出相互联系.
					按照章节或目录的方式建立包名,然后按照标题来建立类名,根据小标题等的具体情况来设置该类的方法或属性.
				第二个代码项目是通过代码来模拟使用场景或例子来整体描述本书,实现书中理论的逻辑自洽从而达到应用的目的.
			文档:
				1:书籍的思维导图.
				2:场景的设计文档(程序业务设计)
		代码设计
			1:项目名通常用书名命名,存在英文书名的使用英文书名为准,仅存中文的情况下使用中文进行命名.
			2:基本规则是按照章节名作为当前包名,但是为了表达章节的前后顺序.用前缀包名"a,b,c,d..."来表示顺序.
				例如:
				com.book.beinglogical.a.学习逻辑学的思想准备
				com.book.beinglogical.b.逻辑学的基本原理
			3:知识点映射代码的规则
				1:书籍中明确无异议的名词或定义映射为代码中的常量.
				2:对书中相同的明确无异议名词或定义不能在代码中进行重复声明常量.
				3:书中的标题为动词时一般是映射成方法.含义可变的名词或定义映射成属性.
			
			
Code of practice:
